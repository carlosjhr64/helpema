# Types
type opt = Hash[Symbol, _ToS]
type tr  = Hash[Symbol, Symbol]
type csf = Hash[Class, Array[Object]]
type arg = (String | [String, String])
type blk = ^(*untyped) -> untyped
type pss = ^(IO, opt, blk?) -> untyped

# Classes
module Helpema
  VERSION: String
  extend Helpema

  def satisfies?: (*String reqs) -> bool

  def to_args: (?usage: opt?, ?synonyms: tr?) -> Array[String]

  def classify: (?hash: csf) -> csf

  def to_arg: (Symbol key, _ToS value) -> arg?

  def to_flag: -> String?

  def run_command: (String cmd, ?opt options, ?usage: opt?, ?synonyms: tr?,
    ?mode: String, ?exception: String?, ?forward_pass: pss?,
    **untyped) ? {(*untyped)->untyped} -> untyped

  def define_command: (Symbol name, ?cmd: String,
    ?version: String?, ?v: String?, ?usage: opt?, ?synonyms: tr?,
    ?mode: String, ?exception: String?, **untyped) ? {(IO,opt,blk?)->untyped} -> untyped

  def requires: (*String list) -> Array[String]

  module SSSS
    def self.split: (secret: String, threshold: Integer, shares: Integer, ?token: String?, ?level: Integer?, ?hexmode: bool) -> Array[String]

    def self.combine: (secrets: Array[String], threshold: Integer, ?hexmode: bool) -> String
  end

  module YouTubeDL
    def self.json: (String url) -> untyped
  end

  module ZBar
    def self.cam: -> String

    def self.img: (String filename) -> String

    def self.screen: -> String?

    def self.snapshot: (String filename) -> bool?
  end
end
